

In kibana:
simple configurations:


  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_size": "50GB",
            "max_age": "7d"
          },
          "forcemerge": {
            "max_num_segments": 1
          }
        }
      },
      "warm": {
        "min_age": "1d",
        "actions": {
          "allocate": {
            "number_of_replicas": 1
          }
        }
      },
      "cold": {
        "min_age": "7d",
        "actions": {
          "allocate": {
            "require": {
              "data": "cold"
            }
          }
        }
      },
      "delete": {
        "min_age": "30d",
        "actions": {
          "delete": {}
        }
      }
    }
  }
}





1. Force Merge

    What it does:

        Merges segments of an index into a smaller number of segments.

        Reduces the number of Lucene segments in an index, which improves search performance and reduces resource usage.

    When to use:

        After an index is no longer being written to (e.g., in the warm or cold phase).

        When you want to optimize search performance.

    Example:
    json
    Copy

    "forcemerge": {
      "max_num_segments": 1
    }

    This merges all segments into a single segment.
2. Shrink

    What it does:

        Reduces the number of shards in an index.

        Creates a new index with fewer shards and copies the data from the original index.

    When to use:

        When an index has too many shards for its size (e.g., after the hot phase when the index is no longer actively written to).

        To reduce cluster overhead and improve resource utilization.

    Example:
    json
    Copy

    "shrink": {
      "number_of_shards": 1
    }

    This reduces the number of shards to 1.

3. Downsample

    What it does:

        Reduces the granularity of time-series data by aggregating it into larger time intervals (e.g., from 1-second to 1-minute intervals).

        Creates a new downsampled index with fewer documents, saving storage space.

    When to use:

        For time-series data that doesnâ€™t require high granularity for historical analysis.

        To reduce storage costs for older data.

    Example:
    json
    Copy

    "downsample": {
      "fixed_interval": "1h"
    }

    This downsamples the data to 1-hour intervals.

4. Read-Only

    What it does:

        Makes an index read-only, preventing any further writes or updates.

    When to use:

        For indices that are no longer being updated (e.g., in the warm or cold phase).

        To prevent accidental modifications to historical data.

    Example:
    json
    Copy

    "readonly": {}

5. Index Priority

    What it does:

        Assigns a priority level to an index, which determines the order in which indices are recovered during a cluster restart.

        Higher-priority indices are recovered first.

    When to use:

        To ensure critical indices are recovered before less important ones.

    Example:
    json
    Copy

    "set_priority": {
      "priority": 50
    }

    This sets the index priority to 50 (higher values mean higher priority).

6. Data Allocation

    What it does:

        Controls where an index is stored in the cluster, based on node attributes (e.g., hot/warm/cold nodes).

        Allows you to move indices to specific nodes or tiers of storage.

    When to use:

        To optimize resource usage by moving older indices to less expensive hardware or storage tiers.

        To enforce data tiering (e.g., hot, warm, cold).

    Example:
    json
    Copy

    "allocate": {
      "require": {
        "data": "cold"
      },
      "number_of_replicas": 1
    }

    This moves the index to nodes tagged as cold and sets the replica count to 1.

How These Actions Fit into ILM Phases

    Hot Phase:

        Use rollover to create new indices.

        Use forcemerge to optimize active indices.

        Use shrink to reduce shard count for large indices.

    Warm Phase:

        Use allocate to move indices to warm nodes.

        Use readonly to prevent further writes.

        Use forcemerge to optimize segments.

    Cold Phase:

        Use allocate to move indices to cold nodes.

        Use downsample to reduce storage costs for time-series data.

    Delete Phase:

        Use delete to remove indices that are no longer needed.
